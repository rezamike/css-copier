{"map":"{\"version\":3,\"sources\":[\"/Users/msanaiha/Desktop/forfunsies/css-copier/client/src/App.js\",\"/Users/msanaiha/Desktop/forfunsies/css-copier/client/src/serviceWorker.js\",\"/Users/msanaiha/Desktop/forfunsies/css-copier/client/src/index.js\"],\"names\":[\"styles\",\"main\",\"backgroundColor\",\"width\",\"height\",\"display\",\"flexDirection\",\"justifyContent\",\"alignItems\",\"header\",\"position\",\"margin\",\"headerText\",\"color\",\"fontSize\",\"textAlign\",\"saveBox\",\"border\",\"borderRadius\",\"startStop\",\"App\",\"react_default\",\"a\",\"createElement\",\"style\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"8MAGMA,cAAS,CACbC,KAAM,CACJC,gBAAiB,UACjBC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAEdC,OAAQ,CACNC,SAAU,WACVP,MAAO,OACPC,OAAQ,OACRO,OAAQ,QAEVC,WAAY,CACVC,MAAO,QACPC,SAAU,GACVC,UAAW,UAEbC,QAAS,CACPN,SAAU,WACVO,OAAQ,iBACRd,MAAO,MACPC,OAAQ,MACRF,gBAAiB,QACjBgB,aAAc,EACdP,OAAQ,QAEVQ,UAAW,CACTT,SAAU,WACVP,MAAO,OACPC,OAAQ,OACRO,OAAQ,UAoBGS,IAAAA,EAhBf,WACE,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,MAAOxB,EAAOC,MACjBoB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,MAAOxB,EAAOS,QACjBY,EAAAC,EAAAC,cAAA,IAAA,CAAGC,MAAOxB,EAAOY,YAAjB,eAEFS,EAAAC,EAAAC,cAAA,MAAA,CAAKC,MAAOxB,EAAOgB,UAGnBK,EAAAC,EAAAC,cAAA,MAAA,CAAKC,MAAOxB,EAAOmB,cCtCLM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from 'react';\\nimport './App.css';\\n\\nconst styles = {\\n  main: {\\n    backgroundColor: 'skyblue',\\n    width: '325px',\\n    height: '450px',\\n    display: 'flex',\\n    flexDirection: 'column',\\n    justifyContent: 'center',\\n    alignItems: 'center',\\n  },\\n  header: {\\n    position: 'absolute',\\n    width: '100%',\\n    height: '100%',\\n    margin: 'auto'\\n  },\\n  headerText: {\\n    color: 'black',\\n    fontSize: 32,\\n    textAlign: 'center'\\n  },\\n  saveBox: {\\n    position: 'absolute',\\n    border: '2px gray solid',\\n    width: '60%',\\n    height: '20%',\\n    backgroundColor: 'white',\\n    borderRadius: 5,\\n    margin: 'auto'\\n  },\\n  startStop: {\\n    position: 'absolute',\\n    width: '100%',\\n    height: '100%',\\n    margin: 'auto'\\n  }\\n};\\n\\nfunction App() {\\n  return (\\n    <div style={styles.main}>\\n      <div style={styles.header}>\\n        <p style={styles.headerText}>CSS Copier</p>\\n      </div>\\n      <div style={styles.saveBox}>\\n\\n      </div>\\n      <div style={styles.startStop}>\\n\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,function(e,t,o){e.exports=o(11)},,,,,,function(e,t,o){},function(e,t,o){},function(e,t,o){\"use strict\";o.r(t);var n=o(0),a=o.n(n),i=o(2),r=o.n(i),l=(o(9),o(10),{main:{backgroundColor:\"skyblue\",width:\"325px\",height:\"450px\",display:\"flex\",flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\"},header:{position:\"absolute\",width:\"100%\",height:\"100%\",margin:\"auto\"},headerText:{color:\"black\",fontSize:32,textAlign:\"center\"},saveBox:{position:\"absolute\",border:\"2px gray solid\",width:\"60%\",height:\"20%\",backgroundColor:\"white\",borderRadius:5,margin:\"auto\"},startStop:{position:\"absolute\",width:\"100%\",height:\"100%\",margin:\"auto\"}});var s=function(){return a.a.createElement(\"div\",{style:l.main},a.a.createElement(\"div\",{style:l.header},a.a.createElement(\"p\",{style:l.headerText},\"CSS Copier\")),a.a.createElement(\"div\",{style:l.saveBox}),a.a.createElement(\"div\",{style:l.startStop}))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(a.a.createElement(s,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[3,1,2]]]);","extractedComments":[]}